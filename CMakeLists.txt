cmake_minimum_required(VERSION 3.1)
project(cglft)

option(CGLFT_BUILD_STATIC "Build static library instead of shared." OFF)

set(CMAKE_CXX_STANDARD 11)


# the following if-clause was copied from BulletPhysics' CMakeLists.txt
IF(MSVC)
	IF (NOT USE_MSVC_INCREMENTAL_LINKING)
		#MESSAGE("MSVC_INCREMENTAL_DEFAULT"+${MSVC_INCREMENTAL_DEFAULT})
		SET( MSVC_INCREMENTAL_YES_FLAG "/INCREMENTAL:NO")
	
		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags ${CMAKE_EXE_LINKER_FLAGS_DEBUG}) 
		SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "/INCREMENTAL:NO ${replacementFlags}" )
		MESSAGE("CMAKE_EXE_LINKER_FLAGS_DEBUG=${CMAKE_EXE_LINKER_FLAGS_DEBUG}")
	
		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags2 ${CMAKE_EXE_LINKER_FLAGS}) 
		
		SET(CMAKE_EXE_LINKER_FLAGS ${replacementFlag2}) 
		STRING(REPLACE "INCREMENTAL:YES" "" replacementFlags3 "${CMAKE_EXTRA_LINK_FLAGS}") 

		SET(CMAKE_EXTRA_LINK_FLAGS ${replacementFlag3}) 
		
		
		STRING(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" replacementFlags3 "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO}")
		SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ${replacementFlags3}) 
		SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "/INCREMENTAL:NO ${replacementFlags3}" )
	
	ENDIF (NOT USE_MSVC_INCREMENTAL_LINKING)

	IF (NOT USE_MSVC_RUNTIME_LIBRARY_DLL)
		#We statically link to reduce dependancies
		FOREACH(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO )
			IF(${flag_var} MATCHES "/MD")
				STRING(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
			ENDIF(${flag_var} MATCHES "/MD")
			IF(${flag_var} MATCHES "/MDd")
				STRING(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
			ENDIF(${flag_var} MATCHES "/MDd")
		ENDFOREACH(flag_var)
	ENDIF (NOT USE_MSVC_RUNTIME_LIBRARY_DLL)

	IF (CMAKE_CL_64)
	  ADD_DEFINITIONS(-D_WIN64)
	ELSE()
	  OPTION(USE_MSVC_SSE "Use MSVC /arch:sse option"	ON)
	  IF (USE_MSVC_SSE)
		ADD_DEFINITIONS(/arch:SSE)
	  ENDIF()
	ENDIF()
	OPTION(USE_MSVC_FAST_FLOATINGPOINT "Use MSVC /fp:fast option"	ON)
	IF (USE_MSVC_FAST_FLOATINGPOINT)
		ADD_DEFINITIONS(/fp:fast)
  ENDIF()
ENDIF(MSVC)

set(TARGET cglft)
set(CGLFT_VERSION 1.0)
set(INCLUDE_INSTALL_DIR include/cglft)
set(LIB_INSTALL_DIR lib)

set(INCLUDE_FILES
		font_face.h
		glyph.h
		font_shader.h
		font_renderer.h)

set(SOURCE_FILES
		${INCLUDE_FILES}
		font_face.cpp
		font_shader.cpp
		font_renderer.cpp)



if(CGLFT_BUILD_STATIC)
	add_library(${TARGET} STATIC ${SOURCE_FILES})
else()
	add_library(${TARGET} SHARED ${SOURCE_FILES})
endif()



find_package(Freetype REQUIRED)
include_directories(${FREETYPE_INCLUDE_DIRS})
target_link_libraries(${TARGET} ${FREETYPE_LIBRARIES})

find_package(OpenGL REQUIRED)
include_directories(${OPENGL_INCLUDE_DIR})
target_link_libraries(${TARGET} ${OPENGL_LIBRARIES})

find_package(GLEW REQUIRED)
include_directories(${GLEW_INCLUDE_DIR})
target_link_libraries(${TARGET} ${GLEW_LIBRARY})


install(TARGETS ${TARGET}
		ARCHIVE DESTINATION lib
		LIBRARY DESTINATION ${LIB_INSTALL_DIR}
		INCLUDES DESTINATION ${INCLUDE_INSTALL_DIR})

install(FILES ${INCLUDE_FILES} DESTINATION ${INCLUDE_INSTALL_DIR})


# Config
set(CGLFT_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/${INCLUDE_INSTALL_DIR})
set(CGLFT_LIBRARY_DIRS ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR})
set(CGLFT_LIBRARIES ${TARGET})

configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cglft-config.cmake.in"
		"${CMAKE_CURRENT_BINARY_DIR}/cglft-config.cmake"
		@ONLY ESCAPE_QUOTES)

install(FILES "${CMAKE_CURRENT_BINARY_DIR}/cglft-config.cmake"
		DESTINATION ${LIB_INSTALL_DIR}/cmake/cglft)
